= render 'shared/modal_waiting_panel'

%h3
  %span Display Document
- if @display_document.nil?
  = raw render_no_display_document
- elsif @display_document[:type].downcase == "text"
  %pre
    = raw render_display_text(@display_document[:source])
- elsif @display_document[:type].downcase == "image"
  %img{:src => @display_document[:source], :style => "max-width:50%;"}
- elsif @display_document[:type].downcase == "audio" or @display_document[:type].downcase == "mp3"
  %audio{:controls => "", :style => "width:450px"}
    %source{:src => "/catalog/#{document[:handle].sub(":", "/")}/document/#{@display_document[:id]}"}
    %embed{:height => "50", :src => "/catalog/#{document[:handle].sub(":", "/")}/document/#{@display_document[:id]}", :width => "100"}

  %div{class:"eopas_message"}
    = showMessageIfCannotPlayFile(@display_document[:id])
- elsif @display_document[:type].downcase == "video"
  %video{:controls => "", :style => "width:450px"}
    %source{:src => "/catalog/#{document[:handle].sub(":", "/")}/document/#{@display_document[:id]}"}
  %div Note: This video may not play due to the file format and browser configuration, but you can still download this video from the 'Documents' section below.
- else
  = raw render_no_display_document

%h3
  %span Item Details
%dl.dl-horizontal.dl-invert
  - document_show_fields(document).each do |solr_fname, field|
    - if should_render_show_field? document, field
      %dt{:class => "blacklight-#{solr_fname.parameterize}"}
        = render_document_show_field_label(document, :field => solr_fname) + ":"
      - if solr_fname == 'OLAC_language_facet'
        %dd{:class => "blacklight-#{solr_fname.parameterize}"}
          = raw render_language_codes document[solr_fname]
      - elsif solr_fname == 'collection_name_facet'
        %dd{:class => "blacklight-#{solr_fname.parameterize}"}
          - coll = Collection.find_by_name(document[solr_fname])
          - if !coll.nil?
            = link_to(format_duplicates(document[solr_fname]), collection_path(coll.name))
          - else
            = render_document_show_field_value document, :field => solr_fname
      - elsif solr_fname == 'DC_type_facet'
        %dd{:class => "blacklight-#{solr_fname.parameterize}"}
          = format_duplicates(document[solr_fname])
      - else
        %dd{:class => "blacklight-#{solr_fname.parameterize}"}
          = render_document_show_field_value document, :field => solr_fname
  - development_only = Item.development_only_fields.inject({}) { |hash, field| hash[field] = nil; hash}
  - do_not_display = development_only.merge(document_show_fields(document)) # document_show_fields have already been shown, so don't duplicate them
  - document.keys.each do |k|
    - v = document[k]
    - unless do_not_display.has_key?(k)
      %dt.blacklight= format_key(k) + ":"
      - if k == 'DC_type_facet'
        %dd.blacklight= format_duplicates(v)
      - else
        %dd.blacklight= format_value(v)
  %dt{:class => "blacklight-sparql_endpoint"}
    = "SPARQL endpoint"
  %dd{:class => "blacklight-sparql_endpoint"}
    = raw @item_info.metadata["#{PROJECT_PREFIX_NAME}:sparqlEndpoint"].to_s

- if Rails.env.development?
  %h3
    %span Development Extras
  %dl.dl-horizontal.dl-invert
    - development_only.keys.each do |k|
      - v = document[k]
      - v = "<none>" if v.nil?
      %dt.blacklight= format_key(k) + ":"
      %dd.blacklight= format_value(v)


%h3
  %span Documents
- uris = [MetadataHelper::IDENTIFIER, MetadataHelper::TYPE, MetadataHelper::EXTENT, MetadataHelper::SOURCE]
- documents = item_documents(document, uris)
- if documents.empty?
  %em This Item has no documents
- else
  - documents.sort_by! do |d|
    - d[MetadataHelper::IDENTIFIER]
  - is_cooee = document[MetadataHelper::short_form(MetadataHelper::COLLECTION)][0] == "cooee"
  - type_format = get_type_format(document, is_cooee)
  %table.document-table.table.table-striped{:border => "0"}
    %thead
      %tr
        %th Filename
        %th Type
        %th Size
        %th Contribution
        - if can?(:delete_document_via_web_app, @item.collection) && !@item.collection.is_finalised?
          %th Delete
    %tbody
      - documents.each_with_index do |document, index|
        %tr
          - if document.has_key?(MetadataHelper::SOURCE)
            - if document[MetadataHelper::SOURCE].to_s.starts_with? 'http'
              %td
                %a{:href => document[MetadataHelper::SOURCE]}= document[MetadataHelper::IDENTIFIER]
            - else
              %td
                - if !document[:handle].nil?
                  %a{:href => "/catalog/#{document[:handle].split(':').first}/#{document[:handle].split(':').last}/document/#{document[MetadataHelper::IDENTIFIER]}"}= document[MetadataHelper::IDENTIFIER]
                - else
                  = document[MetadataHelper::IDENTIFIER]
          - else
            %td= document[MetadataHelper::IDENTIFIER]
          - if document.has_key?(MetadataHelper::TYPE)
            - field = document[MetadataHelper::TYPE]
            - field = "unlabelled" if field == ""
            -#/ - field = "Plain" if is_cooee && field == type
          - else
            - field = "unlabelled"
          %td= sprintf(type_format, field)
          - if document.has_key?(MetadataHelper::EXTENT)
            - field = document[MetadataHelper::EXTENT]
            - if field.nil? || field == ""
              - field = "unknown"
            - else
              - field = format_extent(field.to_i, 'B')
          - else
            - field = "unknown"
          %td= field
          %td
            - if !document[:contribution_id].nil?
              %a{:href => contrib_show_path(document[:contribution_id])}= Contribution.find_by_id(document[:contribution_id]).name

          - if can?(:delete_document_via_web_app, @item.collection) && !@item.collection.is_finalised?
            - doc = @item.documents.find_by_file_name(document[MetadataHelper::IDENTIFIER].to_s)
            - unless doc.nil?
              %td= link_to image_tag('/assets/closebox.png'), delete_item_document_web_path(params[:collection],params[:itemId],document[MetadataHelper::IDENTIFIER]), :id => "delete_document_#{doc.id}", data: {confirm: 'Are you sure you want to delete this document?'}

- if can?(:web_add_document, @item.collection) && !@item.collection.is_finalised?
  %br
    %br
      = link_to "Add New Document", web_add_document_path, :id => 'add_new_document', :class => "btn"

  -# By now we are going to restrict the following 2 lines to be present only in testing since the method eopas_viewable?'
  -#is consuming a lot of memory. Once this method is refactored we can uncomment the following 2 lines.
  - if Rails.env.test?
    - if eopas_viewable? params[:id]
      = link_to('View in EOPAS', eopas_path(document[:handle].split(':').first, document[:handle].split(':').last), class: 'btn')


-# User uploaded annotations will no be shown by now
-#%h3
-#  %span Annotations
-#%table.table.table-striped
-#  %thead
-#    %tr
-#      %td
-#        %b
-#          Name
-#      %td
-#        %b
-#          Owner
-#      %td
-#        %b
-#          Date Uploaded
-#  %tbody
-#    -if (@has_main_annotation == true)
-#      %tr{class:'warning'}
-#        %td{colspan:3, style:"text-align:center;"}
-#          Item main annotation
-#      %tr
-#        %td
-#          =link_to @document[:handle].split(':').last + "-ann", :controller=>'catalog', :action=>'annotations', :format => :json
-#        %td
-#          ="N/A"
-#        %td
-#          ="N/A"
-#    %tr{class:'warning'}
-#      %td{colspan:3, style:"text-align:center;"}
-#        User contributed annotations
-#    -if @user_annotations.empty?
-#      %tr
-#        %td{:colspan => 3}
-#          No User contributed annotations found.
-#    -else
-#
-#      -@user_annotations.each do |aUserAnnotation|
-#        %tr
-#          %td
-#            = link_to(aUserAnnotation.original_filename, {:controller => "catalog", :action => "download_annotation", :id => aUserAnnotation.id}, :method => 'GET')
-#          %td
-#            ="#{aUserAnnotation.user.first_name} #{aUserAnnotation.user.last_name}"
-#          %td
-#            =aUserAnnotation.created_at.strftime("%d/%m/%Y %I:%M:%S %P")
-#.form-actions
-#  = form_tag({:action => 'upload_annotation', :controller => 'catalog'}, :method=>"POST", :multipart => 'true') do
-#    = field_set_tag do
-#      = hidden_field_tag :item_handle, @document[:handle]
-#      = file_field_tag :file
-#      = submit_tag "Upload Annotation", :class => "btn btn-primary", :id => "submit-button"

= render 'shared/nectar_attribution'
